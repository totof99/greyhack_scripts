//command: autoexploit
metaxploit = include_lib("/lib/metaxploit.so")
if not metaxploit then 
	metaxploit = include_lib(current_path + "/metaxploit.so")
	if not metaxploit then exit("Could not find metaxploit.so.")
end if
if params.len == 0 or params[0] == "-h" or params[0] == "--help" then 
	exit("Scan and exploit remote library.\nUsage: autoexploit [address] ([port])")
end if
address = params[0]
port = 0
if params.len > 1 then port = params[1].to_int
target = address
if port != 0 then target = target + ":" + port
print(target)
session = metaxploit.net_use(address, port)
if not session then exit("Error during net_use")
targetlib = session.dump_lib
if targetlib then
	print("Found library: " + targetlib.lib_name + " " + targetlib.version) 
	listMem = metaxploit.scan(targetlib)
	if listMem.len == 0 then 
		exit("Scan completed: No issues detected.")
	else
		print("Scan completed: detected issues in " + listMem.len + " memory zones.")
		analysis_result = {}
		index = 1
		for itemMem in listMem
			print(index  + "/" + listMem.len +": Scanning for vulnerabilities at [" + itemMem + "]...")
			analysis = metaxploit.scan_address(targetlib, itemMem)
			//split by check
			checks = analysis.split("Unsafe check: ")
			for check in checks
				//extract unsec value
				end = value.indexOf(". Buffer overflow.")
				value = slice(check, 0, end).split(" ")[-1]
				//extract constraint
				foundConstraint = value.indexOf("*")
				while 
			end for
			begin_pattern = "Unsafe check: "
			end_pattern = ". Buffer overflow."
			begin = analysis.indexOf(begin_pattern)
			end = analysis.indexOf(end_pattern, begin)
			msg = slice(analysis, begin, end)
			msg = msg.split(" " 
			if indexFound then
				analysis.indexOf
			end if
				
			
			
			print(metaxploit.scan_address(targetlib, itemMem))
			index = index + 1
		end for
	end if
end if	
